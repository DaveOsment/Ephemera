# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-ephemera-local
plugin: serverless-client-s3

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom: ${file(config.yml)}
provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: ${self:custom.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:DeleteItem"
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - ${self:custom.region}
            - ":"
            - Ref: 'AWS::AccountId'
            - ":table/" 
            - ${self:custom.dynamodb_table_name}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    - ../lambda/**
    - config.yml
  exclude:
    - ../lambda/test/**

functions:
  ephemera-addtextsecret:
    handler: lambda/ephemera-addtextsecret/ephemera-addtextsecret.handler
    events:
      - http:
          path: v2/addTextSecret
          method: post
          integration: lambda
          cors: true
          request: 
             passThrough: WHEN_NO_MATCH
  ephemera-getsecret:
    handler: lambda/ephemera-getsecret/ephemera-getsecret.handler
    events:
      - http:
          path: v2/getSecret
          method: get
          integration: lambda
          cors: true
          request: 
             passThrough: WHEN_NO_MATCH
  ephemera-ageoffsecret:
    handler: lambda/ephemera-ageoffsecret/ephemera-ageoffsecret.handler 
    events: 
      - schedule: rate(2 hours)

resources:
  Resources:
    PublicBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        BucketName:  ${self:custom.public_bucket_name}
    dynamoDBTable: 
      Type: "AWS::DynamoDB::Table"
      Properties: 
        AttributeDefinitions: 
          - 
            AttributeName: "SecretID"
            AttributeType: "S"
          - 
            AttributeName: "Uploaded"
            AttributeType: "N"
        KeySchema: 
          - 
            AttributeName: "SecretID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.dynamodb_table_name}
        GlobalSecondaryIndexes: 
        - 
          IndexName: "Uploaded"
          KeySchema: 
            - 
              AttributeName: "Uploaded"
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - "SecretID"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"

  Outputs:
    WebsiteURL:
      Value: 
        Fn::GetAtt: PublicBucket.WebsiteURL
      Description: URL for the website hosted on S3